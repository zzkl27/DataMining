index = org_books$`Year-Of-Publication` == c("DK Publishing Inc", "Gallimard")
org_books[index,;]
org_books[index,]
org_books <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
org_books[index,]
org_books[index]
str_locate_all(select[[2]], pattern=',')
str_locate_all(select[[2]], pattern=',')[c(0,-5:)]
str_locate_all(select[[2]], pattern=',')[0]
str_locate_all(select[[2]], pattern=',')[[1]]
str_locate_all(select[[2]], pattern=',')[[1]]['start']
str_locate_all(select[[2]], pattern=',')[[1]]$start4
str_locate_all(select[[2]], pattern=',')[[1]]$start
str_locate_all(select[[2]], pattern=',')[[1]]
str_locate_all(select[[2]], pattern=',')[[1]][,0]
str_locate_all(select[[2]], pattern=',')[[1]][,1]
str_locate_all(select[[2]], pattern=',')[[1]][c(0,8,7,6,5,4),1]
str_locate_all(select[[2]], pattern=',')[[1]][c(1,8,7,6,5,4),1]
org_books[[1]]
str_split(org_books[[1]], ",")
str_split(org_books[[1]], ",", simplify=TRUE)
split_books <- str_split(org_books, ",")
split_books[0]
split_books[1]
split_books[[1]]
length(split_books[[1]])
select[0]
select[1]
select[2]
select[2]
str_split(select[2], ",")
str_split(select[2], "(\".*),")
str_split(select[2], "(?!=\".*),")
str_split(select[2], "(?!=\".*),")
str_split(select[2], "(?!=\".*\\\\"),")
str_split(select[2], "(?!=\".*\\\"),")
str_split(select[2], "(?!=\\\".*\\\"),")
str_split(select[2], "(?!=\\\".*\\\")*,")
str_split(select[2], "(?!=(\\\".*\\\")),")
str_split(select[2], "(?!=(\\\".*\\\")*),")
str_split(select[2], "(?<=(\\\".*\\\")),")
str_split(select[2], "(?!=(\\\".*\\\")),")
str_split(select[2], ",")
org_books <- read_csv2("../../DATA/kaggle/BookRecommentation/Books.csv")
org_books[[1]]
org_books <- read_csv("../../DATA/kaggle/BookRecommentation/Books.csv", )
org_books <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
org_books
org_books[1]
comma_loc <- str_locate_all(org_books, ",")
comma_loc[[1]]
comma_loc[[1]][,0]
comma_loc[[1]][,1]
file_lines <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
comma_loc_list <- str_locate_all(org_books, ",")
line <- file_lines[0]
line <- file_lines[1]
line
str_locate_all(line,"\"")
str_locate_all(line,"\"")[[1]]
str_locate_all(line,"\"")[[1]][,1]
length(str_locate_all(line,"\"")[[1]][,1])
str_count(line,"\"")
10%/%2
10%%2
vector()
vector(mode=str)
vector(mode='character')
line[:1]
line
line[:1]
line[0:1]
line[0:2]
str_sub(line, start=1, end=10)
str_sub(line, start=1, end=1)
str_sub(line, start=1)
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(str, "\"")%%2 == 0){
result <- append(result, str_str)
line <- str_sub(line, start=idx+1)
}
}
result
}
comma_loc_list[[1]]
comma_loc_list[[1]][,1]
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, str_str)
line <- str_sub(line, start=idx+1)
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
line <- str_sub(line, start=idx+1)
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
line <- str_sub(line, start=idx+1)
}
if(length(line) < 1){
break
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
line <- str_sub(line, start=idx+1)
}
print(line)
if(length(line) < 1){
break
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
comma_loc_list[[1]][,1]
comma_loc_list <- str_locate_all(org_books, ",")
comma_loc_list[[1]][,1]
comma_loc_list <- str_which(org_books, ",")
comma_loc_list[[1]]
comma_loc_list[[2]]
comma_loc_list <- str_which(org_books[[1]], ",")
comma_loc_list
comma_loc_list <- str_locate_all(org_books[[1]], ",")
comma_loc_list
org_books[[1]]
file_lines <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
file_lines[[1]]
comma_loc_list <- str_locate_all(file_lines[[1]], ",")
comma_loc_list <- str_locate_all(file_lines, ",")
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
line <- str_sub(line, start=idx+1)
}
print(line)
if(length(line) < 1){
break
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
for(idx in comma_locations){
sub_str <- str_sub(line, start=1, end=idx-1)
print(line)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
line <- str_sub(line, start=idx+1)
}
if(length(line) < 1){
break
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
check_csv <- function(line, comma_locations){
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
result
}
check_csv(file_lines[[1]], comma_loc_list[[1]][,1])
file_lines <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
comma_loc_list <- str_locate_all(file_lines, ",")
csv_lines = list()
check_csv <- function(line, comma_locations){
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
result
}
for(idx in seq(1, length(file_liens))){
line <- file_lines[[idx]]
comma_loc_datas <- comma_loc_list[[idx]]
csv_line <- check_csv(lien, comma_loc_datas)
len <- length(csv_lines)
csv_lines[len+1] <- csv_line
}
for(idx in seq(1, length(file_lines))){
line <- file_lines[[idx]]
comma_loc_datas <- comma_loc_list[[idx]]
csv_line <- check_csv(lien, comma_loc_datas)
len <- length(csv_lines)
csv_lines[len+1] <- csv_line
}
for(idx in seq(1, length(file_lines))){
line <- file_lines[[idx]]
comma_loc_datas <- comma_loc_list[[idx]]
csv_line <- check_csv(line, comma_loc_datas)
len <- length(csv_lines)
csv_lines[len+1] <- csv_line
}
warnings()
length_vec = vector(mode="numeric")
for(line in csv_liens){
length_vec <- append(length_vec, length(line))
}
for(line in csv_lines){
length_vec <- append(length_vec, length(line))
}
data <- as.data.frame(csv_lines[2,length(csv_lines)])
csv_lines[[2]]
csv_line
file_lines[[length(file_lines)]]
csv_lines = list()
file_lines <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
comma_loc_list <- str_locate_all(file_lines, ",")
csv_lines = list()
check_csv <- function(line, comma_locations){
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
result
}
for(idx in seq(1, length(file_lines))){
line <- file_lines[[idx]]
comma_loc_datas <- comma_loc_list[[idx]]
csv_line <- check_csv(line, comma_loc_datas)
len <- length(csv_lines)
csv_lines[len+1] <- csv_line
}
?map()
str_locate_all(line, ",")
str_locate_all(line, ",")[[1]]
str_locate_all(line, ",")[[1]][,1]
check_csv <- function(line){
comma_locations <- str_locate_all(line, ",")[[1]][,1]
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
result
}
results <- map(.x=file_lines, .f=check_csv)
results[1]
results[[1]
results[[1]]
results[[1]]
results[[length(results)]]
data <- reuslts[2,length(reuslts)]
data <- results[2,length(results)]
data <- results[seq(2,length(results))]
data[[1]]
data <- as.data.frame(data)
data
names(data)
data <-
data <- data.frame(results[seq(2,length(results))])
data <- data.frame(results[seq(2,length(results))])
data <- data.frame(results[seq(2,10)])
data
results[seq(2,10)]
data <- as.data.frame(results[seq(2,10)])
data
?data.frame
data <- data.frame(row.names=c('1','2'))
data
data <- data.frame(names=c('1','2'))
data
data <- data.frame(col.names=c('1','2'))
data
results[[1]]
data <- data.frame(header=results[[1]])
data
data <- data.frame()
data
names(data)
names(data) <- results[[1]]
results[[1]]
names(data) <- results[[1]]
data
array(1:10, dim=c(1,5,2))
data <- data.frame(array(dim=c(0,8)))
data
names(data) <- results[[1]]
data
results[[1]]
data
data[1,]
data[1,] <- results[[2]]
results[[2]]
results
check_csv <- function(line){
comma_locations <- str_locate_all(line, ",")[[1]][,1]
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
if(end != length(line)){
sub_str <- str_sub(line, start=start, end=length(line))
result <- append(result, sub_str)
}
result
}
results <- lapply(X=file_lines, FUN=check_csv)
data <- data.frame(array(dim=c(0,8)))
names(data) <- results[[1]]
data
data[1,] <- results[[2]]
data
data[2,] <- results[[3]]
data
as.tibble(data)
results[[1]]
check_csv <- function(line){
comma_locations <- str_locate_all(line, ",")[[1]][,1]
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
if(end != length(line)){
sub_str <- str_sub(line, start=start)
result <- append(result, sub_str)
}
result
}
results <- lapply(X=file_lines[seq(1,10)], FUN=check_csv)
results
data <- data.frame(array(dim=c(0,8)))
names(data) <- results[[1]]
data[2,] <- results[[3]]
data
data[1,] <- results[[2]]
data
as.tibble(data)
header <- results[[1]]
values <- results[2:length(results)]
data.frame(values)
dims(data.frame(values))
dim(data.frame(values))
dim(data.frame(results))
data.frame(results)
tibble(results)
unlist(results)
file_lines <- readLines("../../DATA/kaggle/BookRecommentation/Books.csv")
check_csv <- function(line){
comma_locations <- str_locate_all(line, ",")[[1]][,1]
result = vector(mode='character')
start = 1
for(end in comma_locations){
sub_str <- str_sub(line, start=start, end=end-1)
if(str_count(sub_str, "\"")%%2 == 0){
result <- append(result, sub_str)
start = end+1
}
}
if(end != length(line)){
sub_str <- str_sub(line, start=start)
result <- append(result, sub_str)
}
result
}
results <- lapply(X=file_lines, FUN=check_csv)
rm(file_lines)
header <- results[[1]]
values <- results[2:length(results)]
rm(results)
data <- data.frame(array(dim=c(0,8)))
names(data) <- headers
names(data) <- header
for(idx in seq(1,length(values))){
line <- values[[idx]]
data[idx,] <- line
}
data
data <- tibble(data)
data
unique(data$`Year-Of-Publication`)
data$`Year-Of-Publication`
data2 <- data.frame(array(dim=c(length(values),8)))
data2
summary(data2)
array(dim=c(10,20))
array(dim=c(10,20))[1,1] <- 'test'
a <- array(dim=c(10,20))[1,1]
a[1,1] <- 'test'
a[1,1]
a <- array(dim=c(10,20))
a
a[1,1]
a[1,1] <- 'test'
a
mode(a)
a <- array(dim=c(10,20))
mode(a)
a <- array(dim=c(10,20), mode='test')
a <- array(vector(mode='charactor'), dim=c(10,20))
a <- array(vector(mode='character'), dim=c(10,20))
mode(a)
a
data2 <- data.frame(array(vector(mode='character'), dim=c(length(values),8)))
names(data) <- header
data <- data.frame(array(vector(mode='character'), dim=c(length(values),8)))
names(data) <- header
for(idx in seq(1,length(values))){
line <- values[[idx]]
data[idx,] <- line
}
data <- tibble(data)
data$`Year-Of-Publication`
install.packages('devtools', dependencies=TRUE)
install.packages('IRkernel', dependencies=TRUE)
IRkernel::installspec()
install.packages('car')
library(quantreg)
install.packages('quantreg')
# 분포 그래프
data <- data.frame(x=seq(from=0,to=10,by=1), y=dbinom(seq(from=0,to=10,by=1), size=10, prob=0.5))
ggplot(data) + geom_col(aes(x=x, y=y), fill='red') + scale_x_continuous(breaks = seq(0,10,1))
library(ggplot2)
library(dplyr)
# 분포 그래프
data <- data.frame(x=seq(from=0,to=10,by=1), y=dbinom(seq(from=0,to=10,by=1), size=10, prob=0.5))
ggplot(data) + geom_col(aes(x=x, y=y), fill='red') + scale_x_continuous(breaks = seq(0,10,1))
# 난수 히스토그램 그래프
random_data <- rbinom(n=50000, size=10, prob=0.5) %>% factor()
data <-data.frame(x=random_data) %>% group_by(x) %>% summarize(count=n()/length(random_data)) # 개수를 세아려 확률 계산
ggplot(data=data) + geom_col(aes(x=x, y=count), fill='red')
# 난수 히스토그램 그래프
random_data <- rpois(n=50000, lambda=20) %>% factor()
data <-data.frame(x=random_data) %>% group_by(x) %>% summarize(count=n()/length(random_data)) # 개수를 세아려 확률 계산
ggplot(data=data) + geom_col(aes(x=x, y=count), fill='red')
# 변위치 그래프
data <- data.frame(x=seq(from=0,to=1,by=0.001), y=qpois(seq(from=0,to=1,by=0.001),lambda=20))
ggplot(data) + geom_line(aes(x=x, y=y), color='red') +
scale_x_continuous(breaks = seq(from=0,to=1,by=0.1)) + scale_y_continuous(breaks = seq(0,40,4))
# 난수 히스토그램 그래프
random_data <- rpois(n=50000, lambda=20) %>% factor()
# 변위치 그래프
data <- data.frame(x=seq(from=0,to=1,by=0.001), y=qpois(seq(from=0,to=1,by=0.001),lambda=20))
ggplot(data) + geom_line(aes(x=x, y=y), color='red') +
scale_x_continuous(breaks = seq(from=0,to=1,by=0.1)) + scale_y_continuous(breaks = seq(0,40,4))
# 누적 분포 그래프
data <- data.frame(x=seq(from=0,to=40,by=1), y=ppois(seq(from=0,to=40,by=1), lambda=20))
ggplot(data) + geom_col(aes(x=x, y=y), fill='red') + scale_x_continuous(breaks = seq(0,40,4))
# 변위치 그래프
data <- data.frame(x=seq(from=0,to=1,by=0.001), y=qpois(seq(from=0,to=1,by=0.001),lambda=20))
ggplot(data) + geom_line(aes(x=x, y=y), color='red') +
scale_x_continuous(breaks = seq(from=0,to=1,by=0.1)) + scale_y_continuous(breaks = seq(0,40,4))
# 분포 그래프
data <- data.frame(x=seq(from=0,to=40,by=1), y=dpois(seq(from=0,to=40,by=1), lambda=20))
ggplot(data) + geom_col(aes(x=x, y=y), fill='red') + scale_x_continuous(breaks = seq(0,40,4))
